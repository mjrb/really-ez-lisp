(use std)
(fn merge
    (if (&& (= (len $0) 0) (> (len $1) 0))
    	(if (= (len $1) 1)
	        (head $1)
		(join (head $1) (merge $0 (tail $1) ))
	)
    	(if (= (len $1) 0)
	    (if (= (len $0) 1)
	        (head $0)
		(if (> (len $0) 1)
		    (join (head $0) (merge (tail $0) $1))
		)
	    )
	    (if (< (head $0) (head $1))
	    	(join (head $0) (merge (tail $0) $1))
		(join (head $1) (merge $0 (tail $1) ))
	    )
	)
    )
)

(fn mergeSort
    (if (= 2 (len $0 ))
    	(if (> (get 1 $0) (head $0 ))
	    (list (head $0 ) (get 1 $0))
	    (list (get 1 $0 ) (head $0))
	)
	(if (= 1 (len $0))
	    (list (head $0))
	    (merge
		(mergeSort (get 0 (/ (len $0 ) 2) $0 ))
		(mergeSort (get (/ (len $0 ) 2) (len $0 ) $0 ))
	    )
	)
    )
)
(fn main
    (print (mergeSort (list 7 4 3 8 9 6 2 1 5)))
    (printc 10))