(use std)
(fn testSub
  (printc "\nsubtract\n")
  (print (- 10 20))
  (printc "-> -10\n")
)
(fn testMul
  (printc "\nmultiply\n")
  (print (* 2 4))
  (printc "-> 8\n")
  (print (* 2 2 2))
  (printc "-> 8\n")
)
(fn testDiv
  (printc "\ndivision\n")
  (print (/ 4 2))
  (printc "-> 2")
)
(fn testEqu
  (printc "\nequals\n")
  (print (= 14 14))
  (printc "-> 1\n")
  (print (= 14 12))
  (printc "-> 0\n")
  (print (equal 14 14 14))
  (printc "-> 1\n")
  (print (equal 14 13 14))
  (printc "-> 0\n")
  (print (equal 14))
  (printc "-> 1\n")
)
(fn testGtLt
    (printc "\nGreater\n")
    (print (> 14 14))
    (printc "-> 0\n")
    (print (> 1000 14))
    (printc "-> 1\n")
    (printc "Lesser\n")
    (print (< 100 14))
    (printc "-> 0\n")
    (print (< 0 14))
    (printc "-> 1\n")
)  
(fn testList
    (printc "\nlist\n")
    (print (list 1 2 3 4))
    (printc "-> [1 2 3 4]\n")
    (print (list (list 1 2) (list 3 4)))
    (printc "-> [[1 2] [3 4]]\n")
    (printc "get\n")
    (print (get 1 (list 1 2 3 4)))
    (printc "-> 2\n")
    (printc "get many\n")
    (print (getMany 1 2 (list 1 2 3 4)))
    (printc "-> [2 3]\n")
    (print (getMany 0 5 (list 1 2 3 4 5 6 7 8)))
    (printc "-> [1 2 3 4 5 6]\n")
    (printc "head\n")
    (print (head (list 1 2 3 4)))
    (printc "-> 1\n")
    (print (head (list 1 2 3 4) (list 2 3 4 5) ))
    (printc "-> [1 2]\n")
    (printc "tail\n")
    (print (tail (list 1 2 3 4)))
    (printc "-> [2 3 4]\n")
    (print (tail (list 1 2 3 4) (list 4 5 6 7) ))
    (printc "-> [[2 3 4] [5 6 7]]\n")
    (printc "len\n")
    (print (len (list)))
    (printc "-> 0\n")
    (print (len (list 1 2 3)))
    (printc "-> 3\n")
    (printc "join\n")
    (print (join (list) (list 1)))
    (printc "-> [1]\n")
    (print (join (list 1 2) (list 1 3 4) 5))
    (printc "-> [1 2 1 3 4 5]\n")   
)
(fn testLogic
    (printc "\nlogic\n")
    (printc "and\n")
    (print (and 1 1 1))
    (printc "-> 1\n")
    (print (and 1 1 0))
    (printc "-> 0\n")
    (printc "and\n")
    (print (or 1 0 1))
    (printc "-> 1\n")
    (print (and 0 0 0))
    (printc "-> 0\n")
    (printc "not\n")
    (print (not 14))
    (printc "-> 0\n")
    (print (not 0))
    (printc "-> 1\n")
)

(fn main
    (testSub)
    (testMul)
    (testDiv)
    (testEqu)
    (testGtLt)
    (testList)
    (testLogic)
)